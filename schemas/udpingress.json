{
  "description": "UDPIngress is the Schema for the udpingresses API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    },
    "spec": {
      "description": "UDPIngressSpec defines the desired state of UDPIngress",
      "type": "object",
      "properties": {
        "rules": {
          "description": "A list of rules used to configure the Ingress.",
          "type": "array",
          "items": {
            "description": "UDPIngressRule represents a rule to apply against incoming requests wherein no Host matching is available for request routing, only the port is used to match requests.",
            "type": "object",
            "required": [
              "backend",
              "port"
            ],
            "properties": {
              "backend": {
                "description": "Backend defines the Kubernetes service which accepts traffic from the listening Port defined above.",
                "type": "object",
                "required": [
                  "serviceName",
                  "servicePort"
                ],
                "properties": {
                  "serviceName": {
                    "description": "Specifies the name of the referenced service.",
                    "type": "string"
                  },
                  "servicePort": {
                    "description": "Specifies the port of the referenced service.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 65535,
                    "minimum": 1
                  }
                }
              },
              "port": {
                "description": "Port indicates the port for the Kong proxy to accept incoming traffic on, which will then be routed to the service Backend.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "UDPIngressStatus defines the observed state of UDPIngress",
      "type": "object",
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer.",
          "type": "object",
          "properties": {
            "ingress": {
              "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
              "type": "array",
              "items": {
                "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
                "type": "object",
                "properties": {
                  "hostname": {
                    "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
                    "type": "string"
                  },
                  "ip": {
                    "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
                    "type": "string"
                  },
                  "ports": {
                    "description": "Ports is a list of records of service ports If used, every port defined in the service should have an entry in it",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "port",
                        "protocol"
                      ],
                      "properties": {
                        "error": {
                          "description": "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use   CamelCase names - cloud provider specific error values must have names that comply with the   format foo.example.com/CamelCase. --- The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                          "type": "string",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        },
                        "port": {
                          "description": "Port is the port number of the service port of which status is recorded here",
                          "type": "integer",
                          "format": "int32"
                        },
                        "protocol": {
                          "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\"",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "configuration.konghq.com",
      "kind": "UDPIngress",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}