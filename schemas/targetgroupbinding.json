{
  "description": "TargetGroupBinding is the Schema for the TargetGroupBinding API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    },
    "spec": {
      "description": "TargetGroupBindingSpec defines the desired state of TargetGroupBinding",
      "type": "object",
      "required": [
        "serviceRef",
        "targetGroupARN"
      ],
      "properties": {
        "networking": {
          "description": "networking defines the networking rules to allow ELBV2 LoadBalancer to access targets in TargetGroup.",
          "type": "object",
          "properties": {
            "ingress": {
              "description": "List of ingress rules to allow ELBV2 LoadBalancer to access targets in TargetGroup.",
              "type": "array",
              "items": {
                "description": "NetworkingIngressRule defines a particular set of traffic that is allowed to access TargetGroup's targets.",
                "type": "object",
                "required": [
                  "from",
                  "ports"
                ],
                "properties": {
                  "from": {
                    "description": "List of peers which should be able to access the targets in TargetGroup. At least one NetworkingPeer should be specified.",
                    "type": "array",
                    "items": {
                      "description": "NetworkingPeer defines the source/destination peer for networking rules.",
                      "type": "object",
                      "properties": {
                        "ipBlock": {
                          "description": "IPBlock defines an IPBlock peer. If specified, none of the other fields can be set.",
                          "type": "object",
                          "required": [
                            "cidr"
                          ],
                          "properties": {
                            "cidr": {
                              "description": "CIDR is the network CIDR. Both IPV4 or IPV6 CIDR are accepted.",
                              "type": "string"
                            }
                          }
                        },
                        "securityGroup": {
                          "description": "SecurityGroup defines a SecurityGroup peer. If specified, none of the other fields can be set.",
                          "type": "object",
                          "required": [
                            "groupID"
                          ],
                          "properties": {
                            "groupID": {
                              "description": "GroupID is the EC2 SecurityGroupID.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "ports": {
                    "description": "List of ports which should be made accessible on the targets in TargetGroup. If ports is empty or unspecified, it defaults to all ports with TCP.",
                    "type": "array",
                    "items": {
                      "description": "NetworkingPort defines the port and protocol for networking rules.",
                      "type": "object",
                      "properties": {
                        "port": {
                          "description": "The port which traffic must match. When NodePort endpoints(instance TargetType) is used, this must be a numerical port. When Port endpoints(ip TargetType) is used, this can be either numerical or named port on pods. if port is unspecified, it defaults to all ports.",
                          "x-kubernetes-int-or-string": true
                        },
                        "protocol": {
                          "description": "The protocol which traffic must match. If protocol is unspecified, it defaults to TCP.",
                          "type": "string",
                          "enum": [
                            "TCP",
                            "UDP"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "nodeSelector": {
          "description": "node selector for instance type target groups to only register certain nodes",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "serviceRef": {
          "description": "serviceRef is a reference to a Kubernetes Service and ServicePort.",
          "type": "object",
          "required": [
            "name",
            "port"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the Service.",
              "type": "string"
            },
            "port": {
              "description": "Port is the port of the ServicePort.",
              "x-kubernetes-int-or-string": true
            }
          }
        },
        "targetGroupARN": {
          "description": "targetGroupARN is the Amazon Resource Name (ARN) for the TargetGroup.",
          "type": "string"
        },
        "targetType": {
          "description": "targetType is the TargetType of TargetGroup. If unspecified, it will be automatically inferred.",
          "type": "string",
          "enum": [
            "instance",
            "ip"
          ]
        }
      }
    },
    "status": {
      "description": "TargetGroupBindingStatus defines the observed state of TargetGroupBinding",
      "type": "object",
      "properties": {
        "observedGeneration": {
          "description": "The generation observed by the TargetGroupBinding controller.",
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "elbv2.k8s.aws",
      "kind": "TargetGroupBinding",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}